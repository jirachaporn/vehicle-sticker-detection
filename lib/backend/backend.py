from email.header import Header
from flask import Flask, request, jsonify, Response, make_response
import os, random, smtplib, json, threading, base64, tempfile, urllib.request
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dotenv import load_dotenv
from flask_cors import CORS
from supabase import create_client
from supabase.lib.client_options import ClientOptions
from concurrent.futures import ThreadPoolExecutor
import cloudinary
import cloudinary.uploader
from datetime import datetime
import pytz, cv2, requests, torch, httpx
import numpy as np
import time


load_dotenv()
app = Flask(__name__)
CORS(app)

# set time for thai
tz = pytz.timezone("Asia/Bangkok")
created_at = datetime.now(tz).isoformat()

# Cloudinary
cloudinary.config(
    cloud_name=os.getenv("CLOUDINARY_CLOUD_NAME"),
    api_key=os.getenv("CLOUDINARY_API_KEY"),
    api_secret=os.getenv("CLOUDINARY_API_SECRET"),
)

# Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_ROLE = os.getenv("SUPABASE_SERVICE_ROLE")
supabase = create_client(
    SUPABASE_URL,
    SUPABASE_SERVICE_ROLE,
    options=ClientOptions(
        headers={"Authorization": f"Bearer {SUPABASE_SERVICE_ROLE}"}
    )
)

EMAIL_ADDRESS = os.getenv("EMAIL_ADDRESS")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")

# Roboflow
ROBOFLOW_API_KEY = os.getenv("ROBOFLOW_API_KEY") or ""
ROBOFLOW_BASE_URL = (os.getenv("ROBOFLOW_API_URL") or "https://detect.roboflow.com").rstrip("/")

# üöÄ Global thread pool executor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö async operations
executor = ThreadPoolExecutor(max_workers=3)

# üöÄ Pre-connect SMTP connection pool
smtp_lock = threading.Lock()
smtp_pool = []

# ===== Multi-cam first state =====

# ‡πÇ‡∏°‡πÄ‡∏î‡∏•/‡∏î‡∏µ‡πÄ‡∏ó‡∏Ñ‡∏ä‡∏±‡∏ô
current_model = None
model_type = None               # "local" (‡πÉ‡∏ä‡πâ .pt) | "roboflow" (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
active_model_url = None
RF_MIN_CONF = float(os.getenv("RF_MIN_CONF", "0.25"))
_JPEG_QUALITY_RF = 85

# ‡πÄ‡∏ò‡∏£‡∏î‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
detector_stop = threading.Event()
detector_thread = None
current_location_id = None

# ---- Multi-cam collections ----
# key = index ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå webcam ‡πÉ‡∏ô OpenCV (0,1,2,...)
cameras = {}                    # {cam_id: cv2.VideoCapture}
display_threads = {}            # {cam_id: Thread}
display_stops = {}              # {cam_id: Event}

latest_frame_map = {}           # {cam_id: np.ndarray | None}
latest_jpeg_map  = {}           # {cam_id: bytes | None}
latest_ts_map    = {}           # {cam_id: float}
latest_lock = threading.Lock()

primary_cam_id = None           # ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ detector ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)

# ---- Legacy aliases (‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏¢‡∏±‡∏á‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô multi-cam) ----
latest_frame = None             # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å cam ‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
latest_jpeg  = None
latest_ts    = 0.0
latest_gen   = 0                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà start-camera ‡πÉ‡∏´‡∏°‡πà

# ---- ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ----
DISPLAY_FPS = 60                # 45‚Äì60 ‡∏Å‡πá‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö USB cam ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà
JPEG_QUALITY_DISPLAY = 60       # 0‚Äì100 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (60‚Äì85 ‡∏Ñ‡∏∑‡∏≠ sweet spot)
TARGET_DISPLAY_WIDTH = 640

# ‡πÑ‡∏°‡πà enhance/‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà timestamp ‡∏ó‡∏µ‡πà‡∏ù‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≥‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
APPLY_ENHANCE_FOR_DISPLAY = False
DRAW_TS_ON_DISPLAY = False


def _corsify(response):
    response.headers.add("Access-Control-Allow-Origin", "*")
    response.headers.add("Access-Control-Allow-Headers", "Content-Type,Authorization")
    response.headers.add("Access-Control-Allow-Methods", "GET,PUT,POST,DELETE,OPTIONS")
    return response

def enhance_lowlight(bgr):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢: CLAHE + gamma"""
    # CLAHE ‡∏ö‡∏ô‡∏ä‡πà‡∏≠‡∏á Y
    ycrcb = cv2.cvtColor(bgr, cv2.COLOR_BGR2YCrCb)
    y, cr, cb = cv2.split(ycrcb)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    y = clahe.apply(y)
    ycrcb = cv2.merge([y, cr, cb])
    out = cv2.cvtColor(ycrcb, cv2.COLOR_YCrCb2BGR)

    # gamma (>1 ‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
    gamma = 1.5
    table = np.array([((i / 255.0) ** (1.0 / gamma)) * 255
                      for i in np.arange(256)]).astype("uint8")
    out = cv2.LUT(out, table)
    return out

def create_smtp_connection():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á SMTP connection ‡πÅ‡∏ö‡∏ö reusable"""
    # ‚úÖ ‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏™ env ‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î 'NoneType'.encode() ‡πÉ‡∏ô smtplib
    if not EMAIL_ADDRESS or not EMAIL_PASSWORD:
        print("‚ùå SMTP ENV missing: EMAIL_ADDRESS or EMAIL_PASSWORD is empty")
        return None
    try:
        server = smtplib.SMTP_SSL("smtp.gmail.com", 465, timeout=10)
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        return server
    except Exception as e:
        print(f"‚ùå SMTP connection failed: {e}")
        return None

def get_smtp_connection():
    """‡∏î‡∏∂‡∏á SMTP connection ‡∏à‡∏≤‡∏Å pool ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà"""
    with smtp_lock:
        if smtp_pool:
            return smtp_pool.pop()
    return create_smtp_connection()

def return_smtp_connection(server):
    """‡∏Ñ‡∏∑‡∏ô SMTP connection ‡∏Å‡∏•‡∏±‡∏ö pool"""
    if server and len(smtp_pool) < 2:  # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 2 connections
        with smtp_lock:
            smtp_pool.append(server)
    elif server:
        try:
            server.quit()
        except:
            pass

# üî¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP 4 ‡∏´‡∏•‡∏±‡∏Å
def generate_otp():
    return ''.join([str(random.randint(0, 9)) for _ in range(4)])


def _build_otp_email_html(otp: str) -> str:
    # ‡∏ó‡∏≥‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏Å (inline style ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà)
    box_style = (
        "display:inline-block;width:44px;height:56px;line-height:56px;"
        "margin:0 6px;border-radius:12px;background:#f8fafc;border:1px solid #e5e7eb;"
        "box-shadow:0 1px 2px rgba(0,0,0,.06);font-family:SFMono-Regular,Consolas,Menlo,monospace;"
        "font-weight:700;font-size:24px;color:#111;text-align:center;"
    )
    otp_boxes = "".join(f'<span style="{box_style}">{c}</span>' for c in str(otp).strip())

    return f"""\
        <!DOCTYPE html>
        <html lang="en">
        <body style="margin:0;padding:0;background:#f6f7fb;font-family:Arial,Helvetica,sans-serif;color:#111;">
            <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
            <tr>
                <td align="center" style="padding:24px;">
                <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="max-width:600px;background:#ffffff;border-radius:12px;box-shadow:0 2px 8px rgba(0,0,0,0.05);overflow:hidden;">
                    <tr>
                    <td style="height:4px;background:linear-gradient(90deg,#2563eb,#1d4ed8);"></td>
                    </tr>
                    <tr>
                    <td style="padding:28px;">
                        <h1 style="margin:0 0 8px 0;font-size:20px;line-height:1.3;color:#1d4ed8;">Reset your password</h1>
                        <p style="margin:0 0 18px 0;font-size:14px;color:#444;">
                        Use the verification code below to continue.
                        </p>
                        <div style="text-align:center;padding:6px 0 14px 0;">
                        {otp_boxes}
                        </div>
                        <p style="margin:0 0 6px 0;font-size:12px;color:#666;">
                        This code will expire in <strong>3 minutes</strong>.
                        </p>
                        <p style="margin:0 0 16px 0;font-size:12px;color:#999;">
                        If you didn‚Äôt request a password reset, you can safely ignore this email.
                        </p>
                    </td>
                    </tr>
                    <tr>
                    <td style="padding:12px 28px 24px 28px;border-top:1px solid #eee;">
                        <p style="margin:0;font-size:12px;color:#9aa1a9;text-align:center;">
                        This is an automated message‚Äîno reply is required.
                        </p>
                    </td>
                    </tr>
                </table>
                </td>
            </tr>
            </table>
        </body>
        </html>
        """

# ---------- ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• OTP ‡πÅ‡∏ö‡∏ö HTML-only ----------
def send_otp_email(to_email: str, otp: str) -> bool:
    server = get_smtp_connection()
    if not server:
        return False

    try:
        html = _build_otp_email_html(otp)
        msg = MIMEText(html, "html", "utf-8")   # ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        msg["Subject"] = "Automated Vehicle Tagging System - Your OTP for Password Reset"
        msg["From"] = EMAIL_ADDRESS
        msg["To"] = to_email

        server.send_message(msg)
        return_smtp_connection(server)  # ‡∏Ñ‡∏∑‡∏ô connection ‡∏Å‡∏•‡∏±‡∏ö pool
        return True
    except Exception as e:
        print(f"‚ùå Failed to send email: {e}")
        try:
            server.quit()
        except:
            pass
        return False


# ====== NEW: ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• ======
# ---------- Template ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ----------
def _build_link_email_html(invited_name: str, location_name: str, link_url: str) -> str:
    name = (invited_name or "").strip()
    greet = f"Hi {name}," if name else "Hi there,"
    loc = (location_name or "your workspace").strip()

    # ‡πÇ‡∏ó‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö ‡∏™‡∏∞‡∏≠‡∏≤‡∏î ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏ö‡∏ô‡∏ó‡∏∏‡∏Å client
    return f"""\
        <!DOCTYPE html>
        <html lang="en">
        <body style="margin:0;padding:0;background:#f6f7fb;font-family:Arial,Helvetica,sans-serif;color:#111;">
            <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
            <tr>
                <td align="center" style="padding:24px;">
                <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="max-width:600px;background:#ffffff;border-radius:12px;box-shadow:0 2px 8px rgba(0,0,0,0.05);overflow:hidden;">
                    <tr>
                    <td style="padding:28px 28px 8px 28px;">
                        <h1 style="margin:0 0 8px 0;font-size:20px;line-height:1.3;color:#111;">Confirm your access</h1>
                        <p style="margin:0 0 16px 0;font-size:14px;color:#444;">{greet}</p>
                        <p style="margin:0 0 16px 0;font-size:14px;color:#444;">
                        You‚Äôve been invited to access <strong>{loc}</strong>. Please confirm your access using the button below.
                        </p>
                    </td>
                    </tr>
                    <tr>
                    <td align="left" style="padding:0 28px 20px 28px;">
                        <a href="{link_url}" style="display:inline-block;padding:12px 18px;border-radius:8px;background:#2563eb;color:#ffffff;text-decoration:none;font-weight:600;">
                        Confirm access
                        </a>
                    </td>
                    </tr>
                    <tr>
                    <td style="padding:0 28px 24px 28px;">
                        <p style="margin:0 0 8px 0;font-size:12px;color:#666;">
                        If the button doesn‚Äôt work, copy and paste this link into your browser:
                        </p>
                        <p style="margin:0;font-size:12px;word-break:break-all;">
                        <a href="{link_url}" style="color:#2563eb;text-decoration:underline;">{link_url}</a>
                        </p>
                    </td>
                    </tr>
                    <tr>
                    <td style="padding:0 28px 28px 28px;border-top:1px solid #eee;">
                        <p style="margin:12px 0 0 0;font-size:12px;color:#999;">
                        If you didn‚Äôt request or expect this invitation, you can safely ignore this email.
                        </p>
                    </td>
                    </tr>
                </table>
                <div style="font-size:11px;color:#9aa1a9;margin-top:12px;">
                    This is an automated message‚Äîno reply is required.
                </div>
                </td>
            </tr>
            </table>
        </body>
        </html>
        """


# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏•‡∏¥‡∏á‡∏Å‡πå (‡πÅ‡∏ô‡∏ö‡∏ó‡∏±‡πâ‡∏á Text + HTML) ----------
def send_permission_link_email(
    to_email: str,
    link_url: str,
    *,
    invited_name: str = "",
    location_name: str = "your workspace",
    subject: str = "Confirm your access"
) -> bool:
    """‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏ö‡∏ö HTML ‡∏•‡πâ‡∏ß‡∏ô (‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏•‡∏¢)"""
    if not to_email or not link_url:
        print("‚ùå to_email or link_url is empty")
        return False

    server = get_smtp_connection()
    if not server:
        return False

    try:
        html = _build_link_email_html(invited_name, location_name, link_url)
        msg = MIMEText(html, "html", "utf-8")

        # ‡πÉ‡∏ä‡πâ subject ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô EN ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å endpoint
        msg["Subject"] = str(Header(subject, "utf-8"))
        msg["From"] = EMAIL_ADDRESS
        msg["To"] = to_email

        server.send_message(msg)
        return_smtp_connection(server)
        return True
    except Exception as e:
        print(f"‚ùå Failed to send link email: {e}")
        try:
            server.quit()
        except:
            pass
        return False



# ---------- (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡πÄ‡∏°‡∏• ----------
@app.post("/send-permission-email")
def send_permission_email_endpoint():
    data = request.get_json(silent=True) or {}

    to_email = (data.get("to_email") or "").strip()
    link_url = (data.get("link_url") or "").strip()
    invited_name = (data.get("invited_name") or "").strip()
    location_name = (data.get("location_name") or "your workspace").strip()

    subject_en = f"Automated Vehicle Tagging System - Confirm access to {location_name}" if location_name else "Automated Vehicle Tagging System - Confirm your access"

    ok = send_permission_link_email(
        to_email,
        link_url,
        invited_name=invited_name,
        location_name=location_name,
        subject=subject_en,       
    )
    if not ok:
        return jsonify({"ok": False, "error": "send email failed"}), 500
    return jsonify({"ok": True}), 200



@app.route("/send-otp", methods=["POST"])
def send_otp():
    try:
        data = request.get_json()
        email = data.get("email")

        if not email:
            return jsonify({"error": "Email is required"}), 400

        otp = generate_otp()
        
        # üöÄ ‡πÉ‡∏ä‡πâ Stored Procedure ‡πÅ‡∏ö‡∏ö atomic
        def db_operations():
            try:
                # ‡πÉ‡∏ä‡πâ stored procedure ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ó‡∏±‡πâ‡∏á invalidate + insert ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                result = supabase.rpc('send_new_otp', {
                    'user_email': email,
                    'new_otp': otp
                }).execute()
                return result
            except Exception as stored_error:
                print(f"‚ö†Ô∏è Stored procedure failed: {stored_error}")
                # Fallback
                supabase.rpc('invalidate_previous_otp', {'user_email': email}).execute()
                return supabase.table("password_reset_log").insert({
                    "email": email,
                    "otp": otp,
                    "used": False,
                    "success": None
                }).execute()
        
        # üöÄ ‡∏£‡∏±‡∏ô database operations ‡πÅ‡∏•‡∏∞ email sending ‡πÅ‡∏ö‡∏ö parallel
        db_future = executor.submit(db_operations)
        email_future = executor.submit(send_otp_email, email, otp)
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ database operation ‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏•‡∏î timeout)
        insert_res = db_future.result(timeout=3)
        if not insert_res.data:
            print("‚ùå Failed to insert OTP")
            return jsonify({"error": "Insert OTP failed"}), 500
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ email sending ‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏•‡∏î timeout)
        sent = email_future.result(timeout=8)
        if not sent:
            return jsonify({"error": "Failed to send email"}), 500

        return jsonify({"message": "OTP sent successfully", "email": email}), 200

    except Exception as e:
        print("üî• ERROR during /send-otp:", e)
        return jsonify({"error": str(e)}), 500

@app.route("/verify-otp", methods=["POST"])
def verify_otp():
    try:
        data = request.get_json()
        email = data.get("email")
        otp = data.get("otp")

        if not email or not otp:
            return jsonify({"valid": False, "message": "Email and OTP are required"}), 400

        print(f"üîç Verifying OTP {otp} for {email}")

        # üöÄ ‡πÉ‡∏ä‡πâ Stored Procedure ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ query ‡πÅ‡∏¢‡∏Å
        try:
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ stored procedure ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ
            result = supabase.rpc('verify_and_mark_otp', {
                'user_email': email,
                'user_otp': otp
            }).execute()
            
            # ‡∏ñ‡πâ‡∏≤ stored procedure ‡∏Ñ‡∏∑‡∏ô true = valid
            is_valid = result.data
            
            if is_valid:
                print("‚úÖ OTP is valid")
                return jsonify({"valid": True, "message": "OTP is valid"}), 200
            else:
                print("‚ùå OTP not found or expired")
                return jsonify({"valid": False, "message": "OTP is incorrect or expired"}), 400
                
        except Exception as stored_proc_error:
            print(f"‚ö†Ô∏è Stored procedure failed: {stored_proc_error}")
            # Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
            
            # üöÄ ‡πÉ‡∏ä‡πâ raw SQL query ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏ó‡∏ô‡∏´‡∏•‡∏≤‡∏¢ filters
            query = """
            SELECT id FROM password_reset_log 
            WHERE email = %s 
            AND otp = %s 
            AND used = false 
            AND expires_at > now() 
            ORDER BY created_at DESC 
            LIMIT 1
            """
            
            # ‡πÉ‡∏ä‡πâ supabase.postgrest ‡πÅ‡∏ó‡∏ô table() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
            from postgrest import APIError
            
            result = supabase.table("password_reset_log") \
                .select("id") \
                .eq("email", email) \
                .eq("otp", otp) \
                .eq("used", False) \
                .gt("expires_at", "now()") \
                .order("created_at", desc=True) \
                .limit(1) \
                .execute()

            if result.data and len(result.data) > 0:
                record_id = result.data[0]["id"]
                
                # üöÄ ‡πÉ‡∏ä‡πâ async update
                def update_record():
                    return supabase.table("password_reset_log").update({
                        "used": True,
                        "success": True
                    }).eq("id", record_id).execute()
                
                # ‡∏£‡∏±‡∏ô update ‡πÅ‡∏ö‡∏ö non-blocking
                update_future = executor.submit(update_record)
                
                print("‚úÖ OTP is valid")
                
                # ‡∏™‡πà‡∏á response ‡∏Å‡πà‡∏≠‡∏ô ‡∏£‡∏≠‡πÉ‡∏´‡πâ update ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
                response = jsonify({"valid": True, "message": "OTP is valid"}), 200
                
                # ‡∏£‡∏≠‡πÉ‡∏´‡πâ update ‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                try:
                    update_future.result(timeout=2)
                except:
                    print("‚ö†Ô∏è Update operation timeout but OTP is still valid")
                
                return response

            print("‚ùå OTP not found or expired")
            return jsonify({"valid": False, "message": "OTP is incorrect or expired"}), 400

    except Exception as e:
        print("üî• ERROR during /verify-otp:", e)
        return jsonify({"valid": False, "message": str(e)}), 500

@app.route("/reset-password", methods=["POST"])
def reset_password():
    try:
        data = request.get_json()
        new_password = data.get("new_password")

        if not new_password:
            return jsonify({"success": False, "message": "New password is required"}), 400

        # üöÄ ‡πÉ‡∏ä‡πâ single query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ verified email
        otp_result = supabase.table("password_reset_log") \
            .select("email") \
            .filter("success", "eq", True) \
            .order("created_at", desc=True) \
            .limit(1) \
            .execute()

        if not otp_result.data:
            return jsonify({"success": False, "message": "No verified OTP found"}), 400

        email = otp_result.data[0]["email"]
        print("‚úÖ Using verified email:", email)

        # üöÄ ‡πÉ‡∏ä‡πâ httpx client ‡πÅ‡∏ö‡∏ö persistent connection
        project_id = SUPABASE_URL.split("//")[1].split(".")[0]
        
        headers = {
            "Authorization": f"Bearer {SUPABASE_SERVICE_ROLE}",
            "apikey": SUPABASE_SERVICE_ROLE,
            "Content-Type": "application/json"
        }
        
        # üöÄ ‡πÉ‡∏ä‡πâ context manager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö connection reuse
        with httpx.Client(timeout=httpx.Timeout(10.0)) as client:
            # ‡∏´‡∏≤ user ‡∏î‡πâ‡∏ß‡∏¢ email query ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
            get_url = f"https://{project_id}.supabase.co/auth/v1/admin/users"
            params = {"email": email}  # ‡∏ñ‡πâ‡∏≤ Supabase Auth ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            
            response = client.get(get_url, headers=headers, params=params)
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö email filter ‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤
            if response.status_code != 200:
                response = client.get(get_url, headers=headers)
                
            if response.status_code != 200:
                return jsonify({"success": False, "message": "Cannot fetch users"}), 500

            data_response = response.json()
            all_users = data_response.get("users", data_response if isinstance(data_response, list) else [])
            
            # ‡∏´‡∏≤ user ‡∏ó‡∏µ‡πà email ‡∏ï‡∏£‡∏á‡πÅ‡∏ö‡∏ö exact match
            target_user = next((user for user in all_users 
                               if user.get("email", "").lower() == email.lower()), None)
                
            if not target_user:
                return jsonify({"success": False, "message": f"User with email {email} not found"}), 404

            user_id = target_user["id"]

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ PUT
            put_url = f"https://{project_id}.supabase.co/auth/v1/admin/users/{user_id}"
            put_data = {"password": new_password}

            put_res = client.put(put_url, headers=headers, json=put_data)

            if put_res.status_code == 200:
                updated_user = put_res.json()
                updated_email = updated_user.get("email", "")
                
                if updated_email.lower() == email.lower():
                    print(f"‚úÖ Password updated successfully: {updated_email}")
                    return jsonify({"success": True, "message": "Password updated successfully"}), 200
                else:
                    return jsonify({"success": False, "message": f"Error: Updated wrong user"}), 500
            else:
                error_detail = put_res.json() if put_res.text else {"error": "Unknown error"}
                return jsonify({"success": False, "message": f"Failed to update password: {error_detail}"}), 500

    except Exception as e:
        print("üî• EXCEPTION during reset-password:", repr(e))
        return jsonify({"success": False, "message": str(e)}), 500


@app.route("/locations", methods=["GET"])
def get_locations():
    user_email = request.args.get("user")
    if not user_email:
        return jsonify({"error": "User email is required"}), 400

    try:
        print(f"üîç Fetching locations (via location_members) for: {user_email}")

        # 1) ‡∏´‡∏≤ location_id ‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        mem_res = supabase.table("location_members") \
            .select("location_id") \
            .eq("member_email", user_email) \
            .eq("member_status", "confirmed") \
            .execute()

        memberships = mem_res.data or []
        loc_ids = [m.get("location_id") for m in memberships if m.get("location_id")]
        if not loc_ids:
            return jsonify([]), 200
        

        # 2) ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏° loc_ids (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà)
        loc_res = supabase.table("locations") \
            .select("location_id, location_name, location_address, location_description, location_color, created_at") \
            .in_("location_id", loc_ids) \
            .order("created_at", desc=True) \
            .execute()

        locations = loc_res.data or []

        # 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á response (‡∏Ñ‡∏á key ‡πÄ‡∏î‡∏¥‡∏° 'locations_id' ‡∏ñ‡πâ‡∏≤ frontend ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà)
        result = []
        for loc in locations:
            result.append({
                "locations_id": loc.get("location_id"),                # alias ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
                "name": loc.get("location_name"),
                "address": loc.get("location_address"),
                "description": loc.get("location_description"),
                "color": loc.get("location_color"),
                "created_at": loc.get("created_at"),
            })

        print(f"‚úÖ Found {len(result)} locations for {user_email}")
        return jsonify(result), 200

    except Exception as e:
        print("üî• ERROR during /locations:", e)
        return jsonify({"error": str(e)}), 500



# ===== locations: CREATE =====
@app.route("/save_locations", methods=["POST"])
def save_locations():
    try:
        data = request.get_json() or {}

        # name ‡πÅ‡∏•‡∏∞ owner_email ‡∏¢‡∏±‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á owner membership
        for field in ["name", "owner_email"]:
            if not (data.get(field) or "").strip():
                return jsonify({"error": f"{field} is required"}), 400

        owner_email = (data["owner_email"] or "").strip().lower()
        owner_name = owner_email.split("@", 1)[0].strip() or None

        now_ts = datetime.now(tz).isoformat()
        print(f"üíæ Saving location: {data['name']} for {owner_email}")

        #  map ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á DB ‡πÉ‡∏´‡∏°‡πà
        location_data = {
            "location_name": (data.get("name") or "").strip(),
            "location_address": (data.get("address") or "").strip(),
            "location_description": (data.get("description") or "").strip(),
            "location_color": (data.get("color") or "#1565C0").strip(), 
            "created_at": now_ts,
        }

        # 1) insert ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
        def insert_location():
            return supabase.table("locations").insert(location_data).execute()

        insert_future = executor.submit(insert_location)
        result = insert_future.result(timeout=5)

        if not result.data:
            return jsonify({"error": "Failed to create location"}), 500

        #  ‡∏Ñ‡∏µ‡∏¢‡πå‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠ location_id
        new_id = result.data[0]["location_id"]
        print(f"‚úÖ Location saved with ID: {new_id}")

        # 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå owner ‡πÉ‡∏ô location_members ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
        owner_row = {
            "location_id": new_id,
            "member_email": owner_email,
            "member_name": owner_name,      
            "member_permission": "owner",
            "member_status": "confirmed",
        }

        try:
            supabase.table("location_members").insert(owner_row).execute()
        except Exception as e:
            try:
                supabase.table("locations").delete().eq("location_id", new_id).execute()
            except Exception as _:
                pass
            print(f"‚ùå create owner membership failed: {e}")
            return jsonify({"error": "Failed to create owner membership"}), 500

        return jsonify({
            "message": "Location created successfully",
            "id": new_id,
            "location": result.data[0],
        }), 201

    except Exception as e:
        print(f"üî• ERROR during /save_locations: {e}")
        return jsonify({"error": str(e)}), 500



# ===== locations: UPDATE =====
@app.route('/update_location/<location_id>', methods=['PUT'])
def update_location(location_id):
    try:
        data = request.get_json() or {}

        update_data = {
            "location_name": data.get("name"),
            "location_address": data.get("address"),
            "location_description": data.get("description"),
            "location_color": data.get("color"),
        }

        # ‡∏•‡∏ö key ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô None ‡∏≠‡∏≠‡∏Å (‡∏Å‡∏±‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ null)
        update_data = {k: v for k, v in update_data.items() if v is not None}

        resp = (supabase.table("locations")
                .update(update_data)
                .eq("location_id", location_id)
                .execute())

        if resp.data:
            return jsonify({"message": "Location updated successfully"}), 200
        return jsonify({"message": "Location not found"}), 404

    except Exception as e:
        return jsonify({"message": str(e)}), 500


# ===== locations: DELETE =====
@app.route('/delete_location/<location_id>', methods=['DELETE'])
def delete_location(location_id):
    try:
        # ‡∏ñ‡πâ‡∏≤ FK ‡πÑ‡∏°‡πà‡∏°‡∏µ ON DELETE CASCADE ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        try:
            supabase.table("location_members").delete().eq("location_id", location_id).execute()
            supabase.table("model").delete().eq("location_id", location_id).execute()
            supabase.table("detections").delete().eq("location_id", location_id).execute()
        except Exception as _:
            # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ cascade ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏î‡πâ
            pass

        res = (supabase.table("locations")
               .delete()
               .eq("location_id", location_id)
               .execute())

        if res.data:
            return jsonify({"message": "Location deleted"}), 200
        return jsonify({"error": "Location not found"}), 404

    except Exception as e:
        return jsonify({"error": str(e)}), 500


    
    
@app.route("/upload-sticker-model", methods=["POST"])
def upload_sticker_model():
    try:
        model_name = request.form.get("model_name")
        location_id = request.form.get("location_id")
        files = request.files.getlist("images")

        # üõë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if not model_name or not location_id:
            return jsonify({"error": "Missing model_name or location_id"}), 400

        if len(files) < 5:
            return jsonify({"error": "Upload at least 5 images"}), 400

        image_urls = []

        for file in files:
            if file.content_length > 5 * 1024 * 1024:
                return jsonify({"error": f"{file.filename} exceeds 5MB"}), 400

            result = cloudinary.uploader.upload(
                file,
                folder="model",
                resource_type="image",
                return_delete_token=True
            )

            image_urls.append(result["secure_url"])

        new_sticker = {
            "location_id": location_id,
            "model_name": model_name,
            "is_active": False,
            "created_at": created_at,
            "sticker_status": "processing",
            "image_urls": image_urls
        }

        res = supabase.table("model").insert(new_sticker).execute()

        if res.data:
            return jsonify({
                "message": "Sticker model uploaded successfully",
                "data": res.data[0]
            }), 201
        else:
            return jsonify({"error": "Failed to insert to Supabase"}), 500

    except Exception as e:
        print("üî• ERROR during /upload-sticker-model:", e)
        return jsonify({"error": str(e)}), 500


def _try_open_camera_on_index(index: int):
    """‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ backend ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ö‡∏ô Windows ‡∏ï‡∏≤‡∏° index ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
    backends = [cv2.CAP_DSHOW, cv2.CAP_MSMF, None]
    for be in backends:
        try:
            cap = cv2.VideoCapture(index, be) if be is not None else cv2.VideoCapture(index)
            if not cap.isOpened():
                try: cap.release()
                except: pass
                continue

            # flush buffer
            for _ in range(10):
                ok, _ = cap.read()
                if not ok:
                    break

            ok, img = cap.read()
            if ok and img is not None and img.size > 0:
                return cap, be
            cap.release()
        except Exception as e:
            print(f"‚ö†Ô∏è open camera index={index} with backend {be} failed: {e}")
    return None, None


def _probe_cameras(max_index: int = 8) -> list[int]:
    """‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ index 0..max_index ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"""
    found = []
    for i in range(max_index + 1):
        cap, _ = _try_open_camera_on_index(i)
        if cap is not None:
            found.append(i)
            cap.release()
    return found


@app.get("/list-cameras")
def list_cameras():
    """‡∏Ñ‡∏∑‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå index ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ (‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå‡∏ï‡∏±‡∏î index 0 ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å)"""
    usb_only = request.args.get("usb_only", "1") == "1"
    found = _probe_cameras(8)
    cams = [i for i in found if (not usb_only or i != 0)] or found
    return _corsify(jsonify({"available": cams}))



@app.route("/start-camera", methods=["POST", "OPTIONS"])
def start_camera():
    if request.method == "OPTIONS":
        return _corsify(make_response(("", 200)))

    global detector_thread, detector_stop, current_location_id
    global primary_cam_id, latest_gen

    data = request.get_json() or {}
    location_id = data.get("location_id")
    cam_indices = data.get("camera_indices")            # optional: [1,2,...]
    usb_only    = bool(data.get("usb_only", True))      # ‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå True = ‡∏ï‡∏±‡∏î 0 ‡∏ó‡∏¥‡πâ‡∏á

    if not location_id:
        return _corsify(jsonify({"error": "location_id is required"})), 400

    # --- ‡πÄ‡∏ä‡πá‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• is_active (‡∏Ñ‡∏á logic ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ---
    try:
        model_res = (
            supabase.table("model")
            .select("model_url")
            .eq("location_id", location_id)
            .eq("is_active", True)
            .limit(1)
            .execute()
        )
    except Exception as e:
        return _corsify(jsonify({"error": f"DB error: {e}"})), 500

    if not model_res.data or not (model_res.data[0].get("model_url") or "").strip():
        return _corsify(jsonify({
            "error": "No active model for this location.",
            "code": "NO_ACTIVE_MODEL"
        })), 401

    # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î ---
    if not cam_indices:
        probed = _probe_cameras(8)
        cam_indices = [i for i in probed if (not usb_only or i != 0)] or probed
    if not cam_indices:
        return _corsify(jsonify({"error": "No webcam found"})), 404

    # --- ‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (display threads + cameras) ---
    for ev in list(display_stops.values()):
        try: ev.set()
        except: pass
    for th in list(display_threads.values()):
        try:
            if th and th.is_alive():
                th.join(timeout=1)
        except: pass
    display_threads.clear()
    display_stops.clear()

    for cid, cap in list(cameras.items()):
        try:
            if cap and cap.isOpened():
                cap.release()
        except: pass
        cameras.pop(cid, None)

    # --- ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ + ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ---
    opened = []
    for idx in cam_indices:
        cap, be = _try_open_camera_on_index(idx)
        if cap is None:
            print(f"‚ö†Ô∏è open camera {idx} failed"); continue

        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° 1280x720@60 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô 640x480@60
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
        cap.set(cv2.CAP_PROP_FPS, 60)
        try:
            fps = cap.get(cv2.CAP_PROP_FPS) or 0
        except Exception:
            fps = 0
        if fps < 59:
            cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            cap.set(cv2.CAP_PROP_FPS, 60)

        for _ in range(12):  # flush ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            cap.read()

        cameras[idx] = cap
        display_stops[idx] = threading.Event()
        th = threading.Thread(target=display_worker, args=(idx,), daemon=True)
        th.start()
        display_threads[idx] = th
        opened.append(idx)
        print(f"‚úÖ Camera opened index={idx}, backend={be}")

    if not opened:
        return _corsify(jsonify({"error": "Unable to open any webcam"})), 500

    # ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö detector) = ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå
    primary_cam_id = opened[0]

    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    with latest_lock:
        for cid in opened:
            latest_frame_map[cid] = None
            latest_jpeg_map[cid]  = None
            latest_ts_map[cid]    = 0.0
        latest_gen += 1

    current_location_id = location_id

    # ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ï detection worker
    try:
        if detector_thread and detector_thread.is_alive():
            detector_stop.set()
            detector_thread.join(timeout=1)
    except Exception:
        pass
    detector_stop = threading.Event()
    detector_thread = threading.Thread(target=detection_worker, daemon=True)
    detector_thread.start()

    base = request.host_url.rstrip("/")
    streams = [f"{base}/frame_raw?cam={cid}" for cid in opened]

    return _corsify(jsonify({
        "message": "Cameras started",
        "opened": opened,
        "streams": streams,
        "location_id": current_location_id,
        "generation": latest_gen
    })), 200



# ------------------------- STOP CAMERA ----------------------------------------
@app.route("/stop-camera", methods=["POST", "OPTIONS"])
def stop_camera():
    if request.method == "OPTIONS":
        return _corsify(make_response(("", 200)))

    global primary_cam_id, detector_thread

    # stop display threads
    for ev in list(display_stops.values()):
        try: ev.set()
        except: pass
    for th in list(display_threads.values()):
        try:
            if th and th.is_alive():
                th.join(timeout=1)
        except: pass
    display_threads.clear()
    display_stops.clear()

    # release cameras
    for cid, cap in list(cameras.items()):
        try:
            if cap and cap.isOpened():
                cap.release()
        except: pass
        cameras.pop(cid, None)

    # stop detection worker
    try:
        detector_stop.set()
        if detector_thread and detector_thread.is_alive():
            detector_thread.join(timeout=1)
    except Exception:
        pass
    detector_thread = None

    # clear buffers
    with latest_lock:
        latest_frame_map.clear()
        latest_jpeg_map.clear()
        latest_ts_map.clear()

    primary_cam_id = None

    # reset model/session flags (‡∏Ñ‡∏á‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    # current_model = None; model_type = None; active_model_url = None
    # current_location_id = None

    return _corsify(jsonify({"message": "Cameras stopped"})), 200


def display_worker(cam_id: int):
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á cam_id ‚Üí resize ‚Üí (optional enhance) ‚Üí encode JPEG
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï latest_*_map[cam_id]; ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô cam ‡∏´‡∏•‡∏±‡∏Å ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï alias legacy ‡∏î‡πâ‡∏ß‡∏¢
    """
    fps_interval = 1.0 / max(1.0, DISPLAY_FPS)

    while not display_stops[cam_id].is_set():
        try:
            cap = cameras.get(cam_id)
            if cap is None or not cap.isOpened():
                time.sleep(0.02); continue

            ok, img = cap.read()
            if not ok or img is None or img.size == 0:
                time.sleep(0.005); continue

            h, w = img.shape[:2]
            if TARGET_DISPLAY_WIDTH > 0 and w > TARGET_DISPLAY_WIDTH:
                r = TARGET_DISPLAY_WIDTH / float(w)
                img = cv2.resize(img, (TARGET_DISPLAY_WIDTH, int(h*r)), interpolation=cv2.INTER_AREA)

            disp = enhance_lowlight(img) if APPLY_ENHANCE_FOR_DISPLAY else img

            ok2, buf = cv2.imencode(".jpg", disp, [int(cv2.IMWRITE_JPEG_QUALITY), JPEG_QUALITY_DISPLAY])
            if ok2:
                now = time.time()
                with latest_lock:
                    latest_frame_map[cam_id] = disp
                    latest_jpeg_map[cam_id]  = buf.tobytes()
                    latest_ts_map[cam_id]    = now
                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï alias legacy ‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏±‡∏á (‡πÉ‡∏ä‡πâ cam ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
                    if primary_cam_id == cam_id:
                        global latest_frame, latest_jpeg, latest_ts
                        latest_frame = disp
                        latest_jpeg  = latest_jpeg_map[cam_id]
                        latest_ts    = now

            time.sleep(fps_interval)

        except Exception as e:
            print(f"display worker error (cam {cam_id}):", e)
            time.sleep(0.01)



# --- NEW: background detection worker (no overlay on image) ---
def detection_worker():
    """
    ‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å (primary_cam_id) ‡∏ú‡πà‡∏≤‡∏ô latest_frame_map ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥ inference
    """
    global model_type, active_model_url, current_model, current_location_id

    while not detector_stop.is_set():
        try:
            with latest_lock:
                pid = primary_cam_id
                img = None if pid is None else latest_frame_map.get(pid)
                img = None if img is None else img.copy()

            if img is None:
                time.sleep(0.02)
                continue

            enhanced = enhance_lowlight(img)

            if model_type == "roboflow" and active_model_url:
                rf_url = f"{active_model_url}&confidence={RF_MIN_CONF}&overlap=20"
                _, buf = cv2.imencode(".jpg", enhanced, [int(cv2.IMWRITE_JPEG_QUALITY), _JPEG_QUALITY_RF])
                b64 = base64.b64encode(buf).decode("utf-8")
                r = requests.post(rf_url, json={"image": b64}, timeout=8)
                _ = r.json().get("predictions", [])
                # TODO: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

            elif model_type == "local" and current_model is not None:
                _ = current_model(enhanced)
                # TODO: ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

            time.sleep(0.20)  # ~5Hz

        except Exception as e:
            print("infer worker error:", e)
            time.sleep(0.2)




@app.route("/frame_raw", methods=["GET", "OPTIONS"])
def frame_raw():
    """
    ‡∏™‡πà‡∏á JPEG ‡πÄ‡∏ü‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (?cam=<id>)
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö min_ts/min_gen ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏î
    """
    if request.method == "OPTIONS":
        return _corsify(make_response(("", 200)))

    def _jpeg_resp(b: bytes, generation=None):
        resp = make_response(b, 200)
        resp.mimetype = "image/jpeg"
        resp.headers["Cache-Control"] = "no-store, no-cache, must-revalidate, max-age=0"
        resp.headers["Pragma"] = "no-cache"
        resp.headers["Expires"] = "0"
        if generation is not None:
            resp.headers["X-Frame-Generation"] = str(generation)
        return _corsify(resp)

    try:
        cam_id = int(request.args.get("cam", str(primary_cam_id if primary_cam_id is not None else 0)))
    except Exception:
        cam_id = primary_cam_id if primary_cam_id is not None else 0

    try:
        min_ts = float(request.args.get("min_ts", "0"))
    except Exception:
        min_ts = 0.0

    try:
        min_gen = int(request.args.get("min_gen", "0"))
    except Exception:
        min_gen = 0

    max_wait_sec = 0.30
    staleness_limit = 0.5
    deadline = time.time() + max_wait_sec

    while time.time() < deadline:
        with latest_lock:
            data = latest_jpeg_map.get(cam_id)
            ts   = latest_ts_map.get(cam_id, 0.0)
            gen  = latest_gen

        if (data and ts > min_ts and gen >= min_gen and (time.time() - ts) <= staleness_limit):
            return _jpeg_resp(data, gen)
        time.sleep(0.01)

    # fallback: placeholder
    black = np.zeros((480, 640, 3), dtype=np.uint8)
    cv2.putText(black, f"WAITING... CAM {cam_id}", (50, 240),
                cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)
    ok2, jpg = cv2.imencode(".jpg", black, [int(cv2.IMWRITE_JPEG_QUALITY), 80])
    return _jpeg_resp(jpg.tobytes() if ok2 else black.tobytes())



# üöÄ ‡πÄ‡∏û‡∏¥‡πà‡∏° cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î app
@app.teardown_appcontext
def cleanup_connections(error):
    with smtp_lock:
        while smtp_pool:
            server = smtp_pool.pop()
            try:
                server.quit()
            except:
                pass

if __name__ == "__main__":
    print(app.url_map)
    app.run(debug=True, threaded=True) 