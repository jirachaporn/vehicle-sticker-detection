import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class ApiService {
  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Windows ‚Üí ‡∏ä‡∏µ‡πâ localhost
  static final String baseUrl = 'http://127.0.0.1:5000';
  static http.Client client = http.Client();

  // ---------- OTP (static) ----------
  static Uri get updatePasswordUrl => Uri.parse('$baseUrl/reset-password');

  // ‡∏™‡πà‡∏á OTP
  static Future<bool> sendOtp(String email) async {
    final url = Uri.parse('$baseUrl/send-otp');
    try {
      final response = await client.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'email': email}),
      );
      debugPrint('üì° send-otp: ${response.statusCode} ${response.body}');
      return response.statusCode == 200;
    } catch (e) {
      debugPrint('‚ùå send-otp error: $e');
      return false;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  static Future<bool> verifyOtp(String email, String otp) async {
    final url = Uri.parse('$baseUrl/verify-otp');
    try {
      final response = await client.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({"email": email, "otp": otp}),
      );
      debugPrint('üì° verify-otp: ${response.statusCode} ${response.body}');
      return response.statusCode == 200;
    } catch (e) {
      debugPrint("‚ùå verify-otp error: $e");
      return false;
    }
  }

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
  static Future<bool> resetPassword(String email, String newPassword) async {
    final url = updatePasswordUrl;
    try {
      final response = await client.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'email': email, 'new_password': newPassword}),
      );
      debugPrint('üì° reset-password: ${response.statusCode} ${response.body}');
      return response.statusCode == 200;
    } catch (e) {
      debugPrint('‚ùå reset-password error: $e');
      return false;
    }
  }

  // ---------- Detection (instance) ----------
  Future<void> detectHeartbeat() async {
    // ‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û/‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö manual ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    // await ApiService.client.post(...);
  }

  // ---------- Camera (instance) ----------
  Future<bool> startCamera(String locationId) async {
    final url = Uri.parse('$baseUrl/start-camera');
    try {
      final res = await ApiService.client.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'location_id': locationId}),
      );
      debugPrint('üé• start-camera: ${res.statusCode} ${res.body}');
      return res.statusCode == 200;
    } catch (e) {
      debugPrint('‚ùå start-camera error: $e');
      return false;
    }
  }

  Future<bool> stopCamera() async {
    final url = Uri.parse('$baseUrl/stop-camera');
    try {
      final res = await ApiService.client.post(url);
      debugPrint('üõë stop-camera: ${res.statusCode} ${res.body}');
      return res.statusCode == 200;
    } catch (e) {
      debugPrint('‚ùå stop-camera error: $e');
      return false;
    }
  }

  /// URL ‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏ß‡∏ô‡∏à‡∏≤‡∏Å backend
  String getFrameUrl({int? tick}) {
    final ts = tick ?? DateTime.now().millisecondsSinceEpoch;
    return '$baseUrl/frame_raw?ts=$ts';
  }

  /// alias ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å frameUrl(...)
  String frameUrl({int? tick}) => getFrameUrl(tick: tick);
}
